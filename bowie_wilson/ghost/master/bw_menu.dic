/*
███    ███ ███████ ███    ██ ██    ██ 
████  ████ ██      ████   ██ ██    ██ 
██ ████ ██ █████   ██ ██  ██ ██    ██ 
██  ██  ██ ██      ██  ██ ██ ██    ██ 
██      ██ ███████ ██   ████  ██████                                  
 */


//---------------------------Menus--------------------------

//--OpenSakuraMenu
//The \b2 tag tells the ghost to use their big balloon for this dialogue. If your menu has a lot of stuff, this'll probably look better than the small one.

OpenSakuraMenu : nonoverlap
{
	// if asleep == 1
	// {
		// "%(waking)\nOh!\w8 S-sorry!\w8 I'll uh,\w8\w8 open the menu now\w8.\w8.\w8.\w8\w8\![set,balloonwait,default]\x\c"
	// }
	// elseif asleep == 0
	if comingback == 1
	{
		OnComingBackMenu
	}
	else
	{
	    OnNormalMenu
	}
}

OnNormalMenu : nonoverlap
{
	    "\0\s[0]\b2\_q"
		--
		"Hey%(mandude)!"
		"Sup%(mandude)?"
		"Wassup%(mandude)?"
		"Need something%(mandude)?"
		"You need something%(mandude)?"
		"Wanna do somethin'%(mandude)?"
		"Hm?"
		"Huh?"
		"Mmm?"
		"Yeah%(mandude)?"
		--
		"\_q"
		--
		MenuRun
}

OnComingBackMenu
{
	if wbrb == "something"
	{
		"Oh hey,\w4 you're back!\x\c"
	}
	--
	comingback = 0
	wbrb = "None"
	aitalkinterval = temptalk
	temptalk = 0
	--
	MenuRun
}

//--MenuRun
//As you just saw above. This actually fills out the rest of the menu. If you're going to be adding or changing functions, this is where you'll be doing your edits.

MenuRun
 {	
 	wd = GetWeekDay
 	ap = GetAP
	//These four statements basically get the day of the week, whether it's AM or PM, the hour, and the time. It's putting together the information to display the time at the bottom of the balloon. Pay it no mind.
	--
	"\n\n\b2\_q* (You ask Bowie to...)\n\n[half]" //The \n\n means two new lines as detailed in the walkthrough, and \_q means quick session, meaning all the text from this point on will display instantly instead of a few letters at a time like normal ghost dialogue.
	--
	if lastTalk != "" //What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty (!= means "does not equal").
	{
	  "\![*]\q[Repeat what he said,OnLastTalk]\n"
	  //If the ghost has said something, it will then display this menu option. You can replace "Repeat Last Dialogue" with whatever caption you like, such as "What were you saying?" or "What did you say?" or "Could you repeat that?" or something like that.
	  
	  //*********************Advanced User Info*******************************
	  //These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.
	  
	  //I briefly touched in bootend.dic about \q, but I'll again cover it here. Pay very close attention to how this bit of dialogue is formatted. You'll see it goes \![*]\q[Displayed Name,linkedfunction]. Breaking it down, \![*] puts the balloon's option icon in front of the choice (usually a > or something), \q sets up the choice, Displayed Name which is the text that will display in the ghost's balloon, then linkedfunction, which is what the choice is linked to when the user clicks it. As you go through this file, look at how every menu option is set up, and you will see they all follow this format, give or take a \![*]. If you're going to be adding new options to menus or creating your own functions and such, make sure you follow this format and learn it well. Make sure to read the coding page of the walkthrough.
	  //***********************************************************************
	}
	--
 	"\![*]\q[Talk to you,OnAiTalk]\n"
	--
	"\![*]\q[Open the Config Menu,configmenu]\n/
	\![*]\q[Open the Functions Menu,dosomething]\n\n[half]/
	
	* (Or would you rather...)\n\n[half]/
	\![*]\q[Open your inventory,checkstuff]\n/
	//\![*]\q[Play a game,playgame]\n/
	\![*]\q[Ask some questions,askquestions]\n/
	//\![*]\q[Tell him something,tellsomething]\n/
	\![*]\q[Give him something,givesomething]/
 	\n\n[half]\![*]\q[Nevermind,CANCEL]\n\nRun Time: %(passhour):%(passmin)\n%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)"
	
}

//Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}

//This is figuring out what day of the week it is. Leave it alone.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//This is finding out whether it's AM or PM. Leave it alone.
GetAP
{
 	if hour >= 0 && hour <= 11
 		{"AM"}
 	else
 		{"PM"}
}

nowhour
{
	if hour12 == 0; "1"
	else; "%(hour12)"
}

nowmin
{
	if minute >= 0 && minute <=9; "0%(minute)"
	else; "%(minute)"
}

// ========================== TELL SOMETHING MENU =============================

Select.tellsomething
{
	"\i[202]%(r)* (Unavailable in current version.)%(d)"
	// "\0\s[0]\b2* (You tell Bowie...)\n\n/
	// \![*]\q[Be Right Back,brbmenu]\n/
	// \n[half]/
	// \![*]\q[Back?,BACKTOMENU]"
}

Select.brbmenu
{
	"\0\s[0]\_q\b2* (I'm gonna go...)\n\n[half]/
	\![*]\q[Do something,brbsomething]\n/
	\![*]\q[Code,brbcode]\n/
	\![*]\q[Write,brbwrite]\n/
	\![*]\q[Draw,brbdraw]\n/
	\![*]\q[Work on something,brbwork]\n/
	\![*]\q[Do homework,brbhomework]\n/
	\![*]\q[Do housework,brbhousework]\n/
	\![*]\q[Play some video games,brbvideogames]\n/
	\![*]\q[Grab some food,brbfood]\n/
	\![*]\q[Grab some water,brbwater]\n/
	\![*]\q[Lay down,brblaydown]\n/
	\![*]\q[Take a nap,brbnap]\n/
	\n[half]/
	\![*]\q[Quick Brb,quickbrb]\n\n/
	\![*]\q[Back?,tellsomething]"
}

Select.changingbrbvars
{
	comingback = 1
	--
	temptalk = aitalkinterval
	aitalkinterval = 0
}

Select.quickbrb
{
	"Ok,\w4 just let me know when you're\nback!\w8\t\*\x\c\i[20]\i[28]\i[201].\w4.\w4.\w4\n\n\![*]\q[I'm Back,quickbrbend]"
}

Select.quickbrbend
{
	"\i[111]\i[112]\i[200]You're back?\w8 Great!"
}

Select.brbsomething
{
	Select.changingbrbvars
	--
	wbrb = "something"
	--
	"Ok,\w4 let me know when you're back!"
}


//If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.
//Advanced users, note that this is formatted as Select.linkedfunction? Remember how it went \q[Displayed Name,linkedfunction] above? When a user clicks an option that doesn't begin with On, they'll be linked to Select.linkedfunction. Pay close attention as we go through and you'll see this in action.

Select.BACKTOMENU
	{
		MenuRun
	}

/*
 ██████  ██████  ███    ██ ███████ ██  ██████  
██      ██    ██ ████   ██ ██      ██ ██       
██      ██    ██ ██ ██  ██ █████   ██ ██   ███ 
██      ██    ██ ██  ██ ██ ██      ██ ██    ██ 
 ██████  ██████  ██   ████ ██      ██  ██████ 
 */
//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
	{
		TalkConfig
	}

//*********************Advanced User Info*******************************
//Some of you may be wondering why some of these Select.options lead to another function. Why not just put the config menu coding under Select.configmenu, instead of linking to TalkConfig?
//Basically any function that's preceded with Select. is limited in its complexity and can only be called within its own .dic file in my experience. Why should you care, you ask? Well, if you're going to link to this function any other way, such as linking it in other .dic files or as a page in a menu, it needs to be a stand-alone function so it can be properly called. I'm pretty sure.
//The basic jist is this; if you're going to reuse whatever it is the option leads to, you should make it its own function. Otherwise, you can leave it in Select.option. As a rule of thumb I'd probably put any complicated stuff in its own function, then use the Select.option to call the full function as you can see above. Simple dialogue responses to a choice can stay as a Select.option though (Like "Do you like going to raves and partying? Yes/No"). Study what stays as a Select.option and what links to another Function as we go through the file.
//***********************************************************************

//--TalkConfig
//This menu allows the user to change their name and other information, as well as put in their birthday and change how often the ghost speaks. You can restructure how this looks if you want, but it's perfectly functional as is. You can of course change the dialogue though if you like.

TalkConfig
{
	"\![set,autoscroll,disable]\0\b[2]\_q-- CONFIG MENU --\n\n"
	--
	"- User Settings -\n\n[half]"
	--
	"Your name: %(r)%(username)%(d) \f[sup,1](\q[Change,TEACHNAME])\f[sup,0]\n"
	--
	"Your pronouns: %(r)%(heshe)/%(himher)%(d) \f[sup,1](\q[Change,TEACHPRONOUN])\f[sup,0]\n"
	--
	"Your birthday: %(r)%(birthdayprint)%(d) \f[sup,1](\q[Change,TEACHBDAY])\f[sup,0]\n\n"
	--
	"- Preference Settings -\n\n[half]"
	--
	"Talk Rate: %(r)%(talktime)%(d) \f[sup,1](\q[Change,talkinter])\f[sup,0]\n"
	--
	    _topofthehour = "Off"
    if switchtopofthehour
    {
    _topofthehour = "On"
    }
  
	"Hourly Notifications: %(r)%(_topofthehour)%(d) \f[sup,1](\q[Change,switchtopofthehour])\f[sup,0]\n"
	--
	_mandudegood = "Off"
	if mandudegood == 1
	{
		_mandudegood = "On"
	}
	
	"Masculine Nicknames: %(r)%(_mandudegood)%(d) \f[sup,1](\q[Change,switchmandudegood]) (\q[?,mandudequestion])\f[sup,0]\n"
	--
	_interactiveconvos = "Off"
	if interactiveconvos == 1
	{
		_interactiveconvos = "On"
	}
	
	//"Interactive Conversations: %(r)%(_interactiveconvos)%(d) \f[sup,1](\q[Change,switchinteractiveconvos])\f[sup,0]\n"
	--
	_medsyesno = "Off"
	if medsyesno == 1
	{
		_medsyesno = "On"
	}
	
	//"Medication Reminders: %(r)%(_medsyesno)%(d) \f[sup,1](\q[Settings,changemedschedule])\f[sup,0]\n\n[half]"
	--		
		{
		"Enable Uninstall? (NOW: %(deleteshitai))\n%(r)\q[ON,deleteon]%(d) | %(r)\q[OFF,deleteoff]%(d)\n\n"
		}
	--
	"\![*]\q[Back to the menu,BACKTOMENU]\e"
}

Select.changemedschedule
{
	"\i[202]%(r)* (Unavailable in current version.)%(d)"
    // if medyesno == 1 //Turning it off or changing the schedule
	// {
	  
	// }
	// else //Turning it on
	// {
		
	// }
}

Select.switchtopofthehour
{
	if switchtopofthehour == 1
	{
		switchtopofthehour = 0
		TalkConfig
	}
	else
	{
		switchtopofthehour = 1
		TalkConfig
	}
}

Select.switchmandudegood
{
	if mandudegood == 1
	{
		mandudegood = 0
		TalkConfig
	}
	else
	{
		mandudegood = 1
		TalkConfig
	}
}

Select.mandudequestion
{
	"\_qIf this option is %(r)On%(d) Bowie will refer to the user as nicknames such as %(r)man%(d), %(r)dude%(d), %(r)bro%(d), etc.\nIf you are uncomfortable with this, be sure to turn this option\n%(r)Off%(d).\n\n[half]\![*]\q[Back,configmenu]"
}

Select.switchinteractiveconvos
{
	if interactiveconvos == 1
	{
		interactiveconvos = 0
		TalkConfig
	}
	else
	{
		interactiveconvos = 1
		TalkConfig
	}
}

//This and the next few set up the pronouns, as you can see by the linkedfunction names. You can replace "\0\s[0]What pronouns do you want?" with your own dialogue if you prefer, but leave the rest of it alone.

Select.TEACHPRONOUN
{
	"\0\s[0]What pronouns do you want me to use?\w5\n\n[half]\_q/
		\![*]\q[He-His-Him,choicemasc]\n/
		\![*]\q[She-Her-Her,choicefem]\n/	
		\![*]\q[They-Their-Them,choiceneither]\n/
		\![*]\q[Custom Pronouns,OnCustomPronounStart]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	"\0\s[0]The pronouns are now he him and his.\e"
	//Leave the part above the double dashes alone. You can replace the snip of dialogue however with whatever you like.
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	"\0\s[0]The pronouns are now she her and her.\e"
	//as above, you can also replace this dialogue.
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	hesshes = "they're"
	--
	"\0\s[0]The pronouns are now they them and their.\e"
	//and this one.
}

//Here are some examples of these envelopes in use.
//"%(heshe) left that there."
//"%(hisher) work is really cool."
//"I'll ask %(himher) later."
//"%(hesshes) really good at it."


//These two options toggle whether or not you can delete your ghost. Leave them alone.

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}


//This next set of functions handles inputting the user's birthday.

Select.TEACHBDAY
	{	
		"\0\s[0]What month were you born? \w8Name or number is fine.\![open,inputbox,OnUserBornMonth,-1]\e"
		
		//You can replace the dialogue up to the \![open,inputbox,OnUserBornMonth,-1] tag, leave that alone. You'll need the input box to get the information.
		
		//*********************Advanced User Info*******************************
		//I also touched on this in bootend.dic and explained it in the walkthrough page on coding, but I'll also go into it here. I'm going to break down the tag there at the end of the sentence so you know what it's doing. Basically, \! means a function is going to happen, open tells it to open something, inputbox tells it to open an input box, and OnUserBornMonth is the function the input box will be linked to, which is just below here. -1 means the input box should not time out. If you want to add input boxes to some new function for whatever reason, you should follow this basic format.
		//On a related note, you can raise any function at the end of any piece of dialogue by using this format - \![raise,InsertFunctionName]. This can be handy for testing things if the function is hard to get to run otherwise.
		//***********************************************************************
	}

//--OnUserBornMonth
//This takes the value that the user put into the input box above and evaluates it. Most of this you won't have to touch, but I'll explain what it's doing anyway. I'll point out where you can change the dialogue.

OnUserBornMonth
{
	_tempmonth = TOSTR(reference0) //this stores what the user put in as a variable called _tempmonth
	_tempmonth = TOLOWER(_tempmonth) //changes it to lowercase
	
	//this is attaching the right value to the input from the user
	if _tempmonth == "january" || _tempmonth == "1" {bornmonth = 1; bornmonthprint = "January"}
	elseif _tempmonth == "february" || _tempmonth == "2" {bornmonth = 2; bornmonthprint = "February"}
	elseif _tempmonth == "march" || _tempmonth == "3" {bornmonth = 3; bornmonthprint = "March"}
	elseif _tempmonth == "april" || _tempmonth == "4" {bornmonth = 4; bornmonthprint = "April"}
	elseif _tempmonth == "may" || _tempmonth == "5" {bornmonth = 5; bornmonthprint = "May"}
	elseif _tempmonth == "june" || _tempmonth == "6" {bornmonth = 6; bornmonthprint = "June"}
	elseif _tempmonth == "july" || _tempmonth == "7" {bornmonth = 7; bornmonthprint = "July"}
	elseif _tempmonth == "august" || _tempmonth == "8" {bornmonth = 8; bornmonthprint = "August"}
	elseif _tempmonth == "september" || _tempmonth == "9" {bornmonth = 9; bornmonthprint = "September"}
	elseif _tempmonth == "october" || _tempmonth == "10" {bornmonth = 10; bornmonthprint = "October"}
	elseif _tempmonth == "november" || _tempmonth == "11" {bornmonth = 11; bornmonthprint = "November"}
	elseif _tempmonth == "december" || _tempmonth == "12" {bornmonth = 12; bornmonthprint = "December"}
	
	else //if the month isn't a valid month, like 32 or something.
	{
			"\0\s[0]That's not a valid month. Try again."
			--
			"\![open,inputbox,OnUserBornMonth,-1]\![set,balloontimeout,-1]\e"
			
			//You can replace this dialogue in the first line. You need to leave the tag for the input box so they can put in a correct month. That last tag there for ![set,balloontimeout,-1] makes it so the input box won't time out if the user takes too long.
	}
	--
	//If it's a valid month
	
	"\0\s[0]So you were born in %(bornmonthprint).\n\w8What day was it?"
	--
	"\![open,inputbox,OnUserBornDay,-1]\![set,balloontimeout,-1]\e"
	
	//Here you can see the use of a bornmonthprint envelope to show the user what month they put in. Notice that it opens an inputbox at the end the same way the one above did. You can replace the dialogue in the first line just as with above.
}

//This adds an appropriate suffix to the number for the day. No need to mess with this.

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{	"%(bornday)st"	}
	elseif bornday == 2 || bornday == 22
	{	"%(bornday)nd"	}
	elseif bornday == 3 || bornday == 23
	{	"%(bornday)rd"	}
	else
	{	"%(bornday)th"	}
}	

//--OnUserBornDay
//This is much like the above function OnUserBornMonth. It'll take the value the user put in for the day and analyze it. Again, there'll be comments explaining how it works, but all you really need to do is change the dialogue appropriately. I'll point out where you can add new dates to check for.

OnUserBornDay
{
	_tempday = reference0 //storing the input in _tempday
	_tempday = TOLOWER(_tempday) //changes it to lowercase
	_tempday = REPLACE(_tempday,"st","") //if the user types something like 2nd, 3rd, etc, this will make it just the number. It'll just add the suffix back later on the one that actually shows.
	_tempday = REPLACE(_tempday,"nd","")
	_tempday = REPLACE(_tempday,"rd","")
	_tempday = REPLACE(_tempday,"th","")
	_tempday = TOINT(_tempday) //Converts it to an integer
	
	if ((bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12) && _tempday >= 1 && _tempday <= 31) || (bornmonth == 2 && _tempday >= 1 && _tempday <= 29) || ((bornmonth == 4 || bornmonth == 6 || bornmonth == 9 || bornmonth == 11) && _tempday >= 1 && _tempday <= 30) //This ugly function checks if the day falls into a valid range. If it does, we set some variables and continue down.
	{
		bornday = _tempday
		borndayprint = Printday
		userbirthday = "%(bornmonth)month %(bornday)day"
		birthdayprint = "%(bornmonthprint) %(borndayprint)"
		
		"%(birthchecked)"
		//Mostly defining envelopes and values in here. No need to touch any of this! Eagle-eyed readers will notice the new envelope birthchecked on its own line like a tiny king. We'll get to that momentarily, but pay it no mind for now.
	}
	else //If the day isn't valid, like the 10046th or something, this will open the input box again and have a \e so the dialogue below doesn't play. You can replace the dialogue in the first line here.
	{
		"\0\s[0]That's not a valid day. Try again."
		--
		"\![open,inputbox,OnUserBornDay,-1]\e"
	}	
}

//--birthchecked
//This is the new envelope you saw me point out above. As you can see here, you can actually call dialogue in a function with an envelope, even when it has if and else statements like here! Which can be pretty handy. Again, more on envelopes in word.dic. Creative ghostmakers can find handy ways to exploit this, I'm sure.

birthchecked
{
	if userbirthday == dayslot //if today is the user's birthday
		{
			"\0\s[0]Happy birthday, %(username).\e"
			//replace this dialogue with whatever you like
		}
	
	else //if the birthday is not listed above.
		{
			"\0\s[0]Your birthday is %(bornmonthprint) %(borndayprint). I'll remember that.\e"
			//note the use of envelopes to display the newly set birthday properly. You can replace this dialogue as well, and you can use %(bornmonthprint) and %(borndayprint) to display the month and day in the new dialogue, if you want.
		}
}

//--Talk Rate
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter
 	{
 		"\0\s[0]\i[202]\b2* (The interval is currently set to %(r)%(talktime)%(d).)/
		//note the new envelope here for %(talktime). You'll see it again in a second. You can replace the dialogue above with whatever you like, just make sure it ends with ./ and not \e.
 		\0\n\n[half]/
 		\![*]\q[Every 30 seconds,TALKMAX]\n/
		\![*]\q[Every minute,TALKHIGH]\n/
 		\![*]\q[Every 3 minutes,TALKNORMAL]\n/
		\![*]\q[Every 5 minutes,TALKPOOR]\n/
		\![*]\q[Custom,TALKcustom]\n/
 		\![*]\q[Don't speak,TALKNONE]\n\n[half]/
		\![*]\q[Don't change,TalksTill]\e"
	}

//If the user doesn't want to change the rate. You can change all of the dialogue in any of these options if you want to reflect the choice the user made. You TECHNICALLY could also change the value in talktime to reflect some other way of measuring time but I wouldn't recommend it, it'd just be confusing I'm sure.
Select.TalksTill
	{
		"\0\s[0]* (You decide to not change the talk rate).\e"
	}

//If the user chooses every 30 seconds.
Select.TALKMAX
	{
 		talktime = "Every 30 seconds" //this sets up the envelope properly
		aitalkinterval = 30 //this changes the actual rate
		
 		"\0\s[0]* (Bowie will now speak every 30 seconds.)\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talktime = "Every minute"
		aitalkinterval = 60
		
 		"\0\s[0]* (Bowie will now speak every 60 seconds.)\e"
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talktime = "Every 3 minutes"
		aitalkinterval = 180
		
 		"\0\s[0]* (Bowie will now speak every 3 minutes.)\e"
	}

//If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
	{
 		talktime = "Every 5 minutes"
		aitalkinterval = 300
		
 		"\0\s[0]* (Bowie will now speak every 5 minutes.)\e"
	}
	
// Custom User Talk Time
Select.TALKcustom
{
	"How often do you want Bowie to talk? (in minutes)"
	--
	"\![open,inputbox,OnUserCustomTalk,-1]\![set,balloontimeout,-1]"
}

OnUserCustomTalk
{
	talkvar = reference0
	talktime = "Every %(talkvar) minutes"
	customtime = reference0 * 60
	aitalkinterval = customtime
	--
	"\0\s[0]* (Bowie will now speak every %(talkvar) minutes.)\e"
}

//If the user chooses to not have them speak. This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
	{
 		talktime = "Don't speak"
		aitalkinterval = 0
		
		"\0\s[0]* (Bowie will not speak to you unprompted.)\e"
	}

	
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
	{
		OnTeachName	
	}

	
//If the user selects cancel in a menu. Replace as you like, or just leave them blank.
Select.CANCEL
	{
	if RAND(100) <= 50
	{
	//"\0\s[0]ReplaceDialogue\e"
	}
	else
	{
	""
	}
		
 	}

	
//Going back to the MenuRun function we finished above, this is if someone selects the Functions option, linked to dosomething. As you can see, it ends up as Select.dosomething.

/*
███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██ ███████ 
██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ ██      
█████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██ ███████ 
██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██      ██ 
██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ███████
*/

Select.dosomething
{
 		"\0\s[0]\b2What we doin, captain?\n\n"
		
		//I mentioned this above in MenuRun, but you can have a set of multiple different responses that may randomly appear when the menu is opened if you offset them from the rest with the -- dashes below this note. Try opening this menu yourself with the template to see how it works. The character will randomly choose one line as the intro. 
		//If you don't want to deal with this, just delete the extra lines and leave one. Otherwise, replace the dialogue above as you like, but note that they don't end with \e here. You can leave the rest of this below alone.
		--
 		"\![*]\q[Open Calendar,CALENDAR]\n/
		\![*]\q[Check Email,MailCheck]\n/
		\![*]\q[Open SSP Preferences,sspconfig]\n/
		\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n/
		\![*]\q[System Information,ChoiceSystemInformation]\n/
		\![*]\q[Update,keroupdatecheck]\n\n"
		//\![*]\q[Input Command,inputcommands]\n\n"
		--
		if debug == 1
		{
		"\![*]\q[DEV MENU,Onopendevmenu]\n\n"
		}
		else
		{
			
		}
		--
 		"\![*]\q[Back to main menu,BACKTOMENU]\e"
}


//When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0\s[0]Opening the calender.\w8\![open,calendar]\e"
	
	//You can replace the dialogue here up to the \!.
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}

//When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0\s[0]Opening the SSP config menu.\w8\![open,configurationdialog]\e"
	
	//Again, you can replace up to the \! tag.
}

//If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	//Don't touch this line. for those curious, it's referencing a SAORI, which are optional user-made plug-in dlls you can download to enable different functions on your ghost. gomi.dll is one included with this template. All SAORI are in Japanese (maybe Korean or Chinese as well idk) and many have disappeared by now, so don't concern yourself very much with SAORI. They're for skilled developers, mostly.
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[0]\w8.\w8.\w8.\n\w8Hm, seems the bin is already empty.\e"
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[-1]\w8.\w8.\w8.\![raise,OnGarbagecanEmpty]\s[0]\n\w8Done.\e"
	}
}


//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. Don't touch any of this either. For those curious though, note that this is done using another SAORI, this time saori_cpuid.dll.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
Select.keroupdatecheck
{
	"\0\s[0]\![updatebymyself]\e"
}	
//This is when the user chooses to check their email. The rest of this function plays out in etc.dic. You can leave this alone.
Select.MailCheck
	{
		"\![biff]\e"
	}

//================================================= CHECK MENU ======================================================
Select.checkstuff
{
	"\b2\![set,autoscroll,disable]\_q/
	-- INVENTORY --\n\n[half]/
	\![*]\q[Journal,openjournal]\n\n/
	//\![*]\q[Phone,openphone]\n\n/
	\![*]\q[Back?,backtomenu]\n/
	\![*]\q[Nevermind,CANCEL]"
}

// PHONE

Select.openphone
{"\b2\![set,autoscroll,disable]\_q/
	-- PHONE --\n\n[half]/
	- Contacts -\n\n[half]/
	\![*]\q[Martin,phonemartin]\n/
	\![*]\q[Astro,phoneastro]\n/
	\![*]\q[Darren,phonedarren]\n/
	\![*]\q[Tiana,phonetiana]\n/
	%(r)\![*]\q[Ghost Dev,phonedev]%(d)\n\n/
	- Apps -\n\n[half]/
	\![*]\q[Shop,phoneshop]\n\n/
	\![*]\q[Back?,checkstuff]\n/
	\![*]\q[Nevermind,CANCEL]"
}

Select.phonemartin
{
	if love <= 100
	{
		"\0\i[106]\i[21]\i[27]\i[33]\i[201]Hm,\w4 I guess Martin's not available right now..."
	}
	else
	{
		if CalledMartin == 1
		{
			MartinOut = 1
			--
			"\0\i[106]\i[21]\i[27]\i[33]\i[201]\1.\w8.\w8.\w8\s[20]\n\n"
			--
			"WASSUPPPPP BABYYY-\n\n[half]Oh %(username)'s here too."
		}
		else
		{
			MartinOut = 1
			--
			"First call"
		}
	}
}

Select.phoneastro
{
}

Select.phonedarren
{
}

Select.phonetiana
{
}

Select.phonedev
{
}

Select.phoneshop
{
}

//===================================== COMMANDS ================================================

Select.inputcommands
{
	// "\![open,inputbox,OnCommands]"
}

// OnCommands
// {
	// tempname = reference0
	
	// if reference0 == "item1"
	// {
		// if reference0 == ""
	// }
// }

//---- OnChoiceTimeout ---------------------------------------------------------
//If the user is given a menu with choices, but doesn't pick one of the choices, it will eventually time out. At that point, they will say this dialogue. Replace with whatever you like, or leave it blank.

OnChoiceTimeout
 {
	"\0\s[0]\e"
 }



OpenKeroMenu
{

}

Select.OpenMartinMenu
{
	"\1\s[20]OOh yeah woo yeah get it.\n\n/
	\![*]\q[Hang Up,martinhangup]\n"
}

Select.martinhangup
{
	"\1Bye bestieeeeee.\w4\s[10]"
	--
	MartinOut = 0
}